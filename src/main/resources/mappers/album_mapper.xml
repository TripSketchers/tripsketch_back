<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
      "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sketchers.tripsketch_back.repository.AlbumMapper">
    <select id="getAlbums" resultType="com.sketchers.tripsketch_back.entity.Album">
        select
            album_id,
            date,
            place_name,
            start_time,
            (   SELECT p.photo_url
                FROM photo_tb p
                WHERE p.album_id = album_tb.album_id
                ORDER BY p.photo_id ASC
                LIMIT 1
            ) AS photo_url,
            case
                when not exists (
                    select 1
                    from trip_schedule_tb tst
                    where tst.trip_schedule_id = album_tb.trip_schedule_id
                ) then 1
                else 0
            end as trip_schedule_missing_flag
        from
            album_tb
        where
            user_id = #{userId}
            and trip_id = #{tripId}
        order by date, start_time
    </select>
    <select id="getPhotosByAlbumId" resultType="com.sketchers.tripsketch_back.entity.Photo" >
        select
            photo_id,
            photo_url,
            memo
        from
            photo_tb
        where
            album_id = #{albumId}
        ORDER BY
            photo_id ASC
    </select>
    <select id="getTripInfo" resultType="com.sketchers.tripsketch_back.entity.Trip">
        select
            start_date, end_date, title
        from
            trip_tb
        where
            user_id = #{userId}
            and trip_id = #{tripId}
    </select>
    <select id="getTripSchedules" resultType="com.sketchers.tripsketch_back.entity.TripSchedulePlaceView">
        select
            v.date,
        	v.trip_schedule_id,
        	v.place_name,
            v.start_time
        from
            trip_tb tt
            left outer join trip_schedule_tb tst on(tst.trip_id = tt.trip_id)
        	left outer join v_trip_schedule_info v on(v.trip_schedule_id = tst.trip_schedule_id)
        where
            tt.user_id = #{userId} and
        	tst.trip_id = #{tripId}
        order by v.date, tst.position
    </select>
    <select id="getAlbumId" resultType="int">
        SELECT IFNULL((
            SELECT album_id
            FROM album_tb
            WHERE user_id = #{userId}
              AND trip_id = #{tripId}
              AND date = #{date}
              AND place_name = #{placeName}
              AND start_time = #{startTime}
            LIMIT 1
        ), 0)
    </select>
    <insert id="createTripAlbum" useGeneratedKeys="true" keyProperty="albumId">
        INSERT INTO album_tb (user_id, trip_id, trip_schedule_id, date, place_name, start_time)
        VALUES (#{userId}, #{tripId}, #{tripScheduleId}, #{date}, #{placeName}, #{startTime})
    </insert>
    <insert id="insertPhoto">
        INSERT INTO photo_tb (album_id, photo_url, memo)
        VALUES (#{albumId}, #{photoUrl}, #{memo})
    </insert>
    <update id="editPhotoMemo" >
        update
            photo_tb
        set
            memo = #{memo}
        where
            photo_id = #{photoId}
    </update>
    <delete id="deleteAlbum" >
        delete from album_tb
        where album_id = #{albumId};
    </delete>
    <delete id="deletePhoto" >
        delete from photo_tb
        where photo_id = #{photoId};
    </delete>
    <delete id="deleteSelectedPhotos">
        delete from photo_tb
        where photo_id IN
        <foreach item="photoId" collection="checkedPhoto" open="(" separator="," close=")">
            #{photoId}
        </foreach>
    </delete>
    <select id="findAlbumId" resultType="int">
        select album_id
        from photo_tb
        where photo_id = #{photoId};
    </select>
    <select id="countPhotos" resultType="int">
        select count(*)
        from photo_tb
        where album_id = #{albumId};
    </select>
    <select id="findOwner" resultType="int">
        select at.user_id
        from album_tb at
        	left outer join photo_tb pt on(pt.album_id = at.album_id)
        where pt.photo_id = #{photoId}
            and at.trip_id = #{tripId};
    </select>
    <select id="getPhoto" resultType="com.sketchers.tripsketch_back.entity.Photo" >
        select
            photo_id,
            photo_url,
            memo
        from
            photo_tb
        where
            photo_id = #{photoId}
    </select>
    <update id="editAlbumSchedule">
        UPDATE album_tb
        SET
        	trip_schedule_id = #{tripScheduleId},
            date = #{date},
            place_name = #{placeName},
            start_time = #{startTime}
        WHERE
        	user_id = #{userId}
        	AND trip_id = #{tripId}
        	AND album_id = #{albumId};
    </update>
    <select id="getAlbumTripScheduleId" resultType="int">
        SELECT trip_schedule_id
        FROM album_tb
        WHERE trip_id = #{tripId}
          AND album_id = #{albumId}
    </select>
</mapper>